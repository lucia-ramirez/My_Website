if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("fitCons.UCSC.hg19")
q(n)
q()
INPUT <- "Downloads/garfield.prep.Asthma.out"
INPUT <- "Downloads/garfield.prep.Asthma.out"
a <- read.table(INPUT, header = FALSE, colClasses = "character")
View(a)
mx <- strsplit(a[,ncol(a)], "", fixed=TRUE)
head(mx)
View(mx)
mx[[1]]
mx2 <- matrix(as.numeric(unlist(mx)), byrow = TRUE, nr = nrow(a))
get_indices <- function(x){seq(as.numeric(x[1]), as.numeric(x[2]), 1)}
View(mx2)
get_indices <- function(x){seq(as.numeric(x[1]), as.numeric(x[2]), 1)}
subsetIndices <- unlist(lapply(strsplit(unlist(strsplit(SUBSET, split=",", fixed=TRUE)), split="-", fixed=TRUE), get_indices))
## script to find the effective number of annotations and the adjusted for multiple testing P-value
args <- commandArgs(trailingOnly = TRUE)
id_subset <- match("-s",args)+1
SUBSET <- args[id_subset]
if (is.na(id_subset)) {print("Note: Using all annotations, if you are only interested in a subset of them you could use option -s, e.g. -s 1-10 "); SUBSET <- 0}
if (SUBSET == 0){
SUBSET <- paste(1, "-", ncol(mx2), sep="")
}
SUBSET
length(mx[[1]])
subsetIndices <- unlist(lapply(strsplit(unlist(strsplit(SUBSET, split=",", fixed=TRUE)), split="-", fixed=TRUE), get_indices))
subsetIndices
tail(subsetIndices,100)
INPUT <- "Downloads/garfield.prep.Asthma.out"
SUBSET <- args[id_subset]
if (is.na(id_subset)) {print("Note: Using all annotations, if you are only interested in a subset of them you could use option -s, e.g. -s 1-10 "); SUBSET <- 0}
SUBSET <- 0
a <- read.table(INPUT, header = FALSE, colClasses = "character")
mx <- strsplit(a[,ncol(a)], "", fixed=TRUE)
mx2 <- matrix(as.numeric(unlist(mx)), byrow = TRUE, nr = nrow(a))
get_indices <- function(x){seq(as.numeric(x[1]), as.numeric(x[2]), 1)}
if (SUBSET == 0){
SUBSET <- paste(1, "-", ncol(mx2), sep="")
}
subsetIndices <- unlist(lapply(strsplit(unlist(strsplit(SUBSET, split=",", fixed=TRUE)), split="-", fixed=TRUE), get_indices))
head(subsetIndices)
subsetIndices
?cor
View(mx2)
cr <- cor(mx2[,subsetIndices])
dim(mx2)
length(cr)
View(cr)
dim(cr)
ncol(cr)
summary(as.vector(mx2))
View(a)
nrow(a)
dim(cr)
View(mx2)
ncol(mx2)
ids <- is.na(cr)
ids
View(ids)
table(as.vector(ids))
cr[ids] <- 0
if(sum(ids) > 0){
print("Presence of some NA values in correlation matrix calculation!! Check your annotation files!! Setting those correlations to 0!!")
}
?eigen
e <- eigen(cr)
e$values[which(e$values<0)] <- 0
?sqrt
View(e)
?eigen
rm(list = ls())
INPUT <- "Downloads/garfield.prep.Asthma.out"
SUBSET <- 0
a <- read.table(INPUT, header = FALSE, colClasses = "character")
mx <- strsplit(a[,ncol(a)], "", fixed=TRUE)
mx2 <- matrix(as.numeric(unlist(mx)), byrow = TRUE, nr = nrow(a))
get_indices <- function(x){seq(as.numeric(x[1]), as.numeric(x[2]), 1)}
subsetIndices <- unlist(lapply(strsplit(unlist(strsplit(SUBSET, split=",", fixed=TRUE)), split="-", fixed=TRUE), get_indices))
cr <- cor(mx2[,subsetIndices])
if (SUBSET == 0){
SUBSET <- paste(1, "-", ncol(mx2), sep="")
}
subsetIndices <- unlist(lapply(strsplit(unlist(strsplit(SUBSET, split=",", fixed=TRUE)), split="-", fixed=TRUE), get_indices))
cr <- cor(mx2[,subsetIndices])
ids <- is.na(cr)
cr[ids] <- 0
if(sum(ids) > 0){
print("Presence of some NA values in correlation matrix calculation!! Check your annotation files!! Setting those correlations to 0!!")
}
e <- eigen(cr)
e$values[which(e$values<0)] <- 0
Meff <- (sum(sqrt(e$values)))^2/sum(e$values)
Mefff
Meff
rm(list = ls())
INPUT <- "Downloads/garfield.prep.Asthma.out"
INPUT <- "Downloads/garfield.prep.Asthma.out" # FROM DANILL DRIVE
PTHRESH <- "1e-5,1e-6,1e-7,1e-8"
PTS <- as.numeric(unlist(strsplit(PTHRESH,",",fixed=TRUE)))
PTS
PTS[1]
BINNING <- "m5,n5,t5"
bins <- cbind(substring(unlist(strsplit(BINNING, ",",fixed=T)),1,1),substring(unlist(strsplit(BINNING, ",",fixed=T)),2))
View(bins)
M <- as.numeric(bins[match("m",bins[,1]),2])
N <- as.numeric(bins[match("n",bins[,1]),2])
T <- as.numeric(bins[match("t",bins[,1]),2])
if (is.na(T)){T <-5; print("Error: No number of bins for the TSS distance was specified. Please check option -b, e.g. -b m5,n5,t5 ");quit(save="no",status=1) }
if (is.na(M)){M <-5; print("Error: No number of bins for the MAF distribution was specified. Please check option -b, e.g. -b m5,n5,t5 ");quit(save="no",status=1) }
if (is.na(N)){N <-5; print("Error: No number of bins for the number of LD proxies was specified. Please check option -b, e.g. -b m5,n5,t5 ");quit(save="no",status=1) }
if (is.na(id_subset)) {print("Note: Testing all annotations, if you are only interested in a subset of them you could use option -s, e.g. -s 1-10 "); SUBSET <- 0}
SUBSET <- 0
CONDITION <- 0
CONDITION <- 0
##### Print arguments #####
print("########################################")
print("########  GARFIELD PARAMETERS  #########")
print(paste("Input file: ",INPUT, sep=""))
print(paste("Link file: ",LINK, sep=""))
print(paste("Pvalue thresholds: ",PTHRESH, sep=""))
print(paste("Binning parameters: ",BINNING, ". T=",T,", M=",M,", N=",N, sep=""))
print(paste("Annotations to use (default 0 denoting all): ",SUBSET, sep=""))
print(paste("Type of analysis - single annotation (0), conditional (1) :",CONDITION, sep=""))
##### Read input file ######
print(paste("Reading input file ", INPUT, sep=""))
a <- read.table(INPUT, colClasses="character",header=FALSE)
ncol <- ncol(a)
View(a)
##### Define bins ######
print("Defining MAF, TSS distance and number of LD proxy bins")
ln <- length(unlist(strsplit(as.character(a[1,7]),"",fixed=TRUE)))
mat <- matrix(as.numeric(unlist(strsplit(as.character(a[,7]),"",fixed=TRUE))),nc=ln,byrow=TRUE)
View(mat)
dim(matrix)
dim(mat)
a[,2] <- as.numeric(a[,2]) # position
a[,3] <- as.numeric(a[,3]) # pval
a[,4] <- as.numeric(a[,4]) # maf
a[,5] <- as.numeric(a[,5]) # tssd
a[,6] <- as.numeric(a[,6]) # ntags r2>0.8
View(a)
if (T>1) {
Tq <- cut(a[,5],as.numeric(quantile(a[,5],seq(0,1,length.out=T+1))), include.lowest = TRUE)
} else {
Tq = rep(1,nrow(a))
}
Tq
seq(0,1,length.out=T+1)
View(a)
head(a[,5])
quantile(a[,5],seq(0,1,length.out=T+1))
as.numeric(quantile(a[,5],seq(0,1,length.out=T+1)))
?cut
head(Tq)
head(a[,5])
head(Tq,50)
rep(1,nrow(a))
tmp1 <- quantile(a[,4],seq(0,1,length.out=M+1))
tmp1
qm <- NULL
tmp1[2]!=tmp1[1]
c(-1,tmp1[2])
M
5:2
tmp1
i <- 5
tmp1 <- quantile(a[,4],seq(0,1,length.out=M+1))
qm <- NULL
if (tmp1[2]!=tmp1[1]){
qm <- c(-1,tmp1[2])
for (i in M:2){
tmp2 <- quantile(a[which(a[,4] > tmp1[2]),4],seq(0,1,length.out=i))
qm <- c(qm,tmp2[2])
tmp1 <- tmp2
}
} else {
qm <- c(-1,tmp1[2])
for (i in (M):2){
tmp2 <- quantile(a[which(a[,4] > tmp1[2]),4],seq(0,1,length.out=i))
qm <- c(qm,tmp2[2])
tmp1 <- tmp2
}
}
Mq <- cut(a[,4],as.numeric(qm), include.lowest = TRUE)
head(Mq)
head(a[,4])
qm
head(Mq)
if (N>1) {
tmp1 <- quantile(a[,6],seq(0,1,length.out=N+1))
qn <- NULL
if (tmp1[2]!=tmp1[1]){
qn <- c(-1,tmp1[2])
for (i in N:2){
tmp2 <- quantile(a[which(a[,6] > tmp1[2]),6],seq(0,1,length.out=i))
qn <- c(qn,tmp2[2])
tmp1 <- tmp2
}
} else {
qn <- c(-1,tmp1[2])
for (i in (N):2){
tmp2 <- quantile(a[which(a[,6] > tmp1[2]),6],seq(0,1,length.out=i))
qn <- c(qn,tmp2[2])
tmp1 <- tmp2
}
}
Nq <- cut(a[,6],as.numeric(qn), include.lowest = TRUE)
} else {
Nq = rep(1,nrow(a))
}
features <- ""
if (M>1) {features <- paste(features,"Mq+", sep="")}
if (T>1) {features <- paste(features,"Tq+", sep="")}
if (N>1) {features <- paste(features,"Nq+", sep="")}
print(paste("Accounting for features : ",features,sep=""))
features
#### Define response variables ######
print("Defining response variables according to p-value thresholds")
Pmat <- NULL
nt <- NULL
PTS
for (t in PTS){
Pmat <- cbind(Pmat,as.numeric(a[,3]<=t))
nt <- c(nt, sum(as.numeric(a[,3]<=t)))
}
View(Pmat)
View(a)
length(PTS)
n <- nrow(Pmat)
##### Process the subset of annotations to run enrichment for ######
get_indices <- function(x){seq(as.numeric(x[1]), as.numeric(x[2]), 1)}
if (SUBSET==0){
SUBSET <- paste(1, "-", ncol(mat), sep="")
}
subsetIndices <- unlist(lapply(strsplit(unlist(strsplit(SUBSET, split=",", fixed=TRUE)), split="-", fixed=TRUE), get_indices))
CONDITION
subsetIndices
subsetIndices %>% head
head(subsetIndices)
i
i <- 1
View(mat)
dim(mat)
ncol(mat)
na <- sum(mat[,i])
tail(subsetIndices)
dat <- NULL
length(PTS)
j <- 1
t <- PTS[j]
t
formula <- paste("Pmat[,j]~",features,"mat[,i]",sep="")
formula
View(Pmat)
?glm
model <- glm(formula, family='binomial')
model
formula
Mq
model
formula
View(mat)
View(mat)
dim(mat)
summary(model)
smr <- summary(model)$coefficients
nrow(smr)
View(smr)
smrC <- smr[nrow(smr),]
smrC
nat <- sum(mat[,i]*as.numeric(a[,3]<=t))
nat
as.numeric(a[,3]<=t))
as.numeric(a[,3]<=t)
head(a[,3])
mat[,i]*as.numeric(a[,3]<=t)
as.numeric(a[,3]<=t)[500:1200]
as.numeric(a[,3]<=t)[900:1200]
as.numeric(a[,3]<=t)[1000:1600]
any(a[,3]<=t)
which(a[,3]<=t)
(a[,3] <= t)[4800:5000]
as.numeric(a[,3]<=t)[4800:5000]
nat <- sum(mat[,i]*as.numeric(a[,3]<=t))
sum(as.numeric(a[,3]<=t))
nat <- sum(mat[,i]*as.numeric(a[,3]<=t)) # Number of variants that have are lower than the pvalue treshold and have a particular annotation
dat <- rbind(dat,c(i,t,exp(smrC[1]), smrC[4],smrC[1],smrC[2],smrC[1]-1.96*smrC[2],smrC[1]+1.96*smrC[2], nat, na, nt[j], n))
dat
print(i)
dat = as.data.frame(dat)
dat$linkID = lnk[i,1]
dat$Annotation = lnk[i,2]
dat$Celltype = lnk[i,3]
dat
t
na <- sum(mat[,i])
dat <- NULL
for (j in 1:length(PTS)){
t <- PTS[j]
formula <- paste("Pmat[,j]~",features,"mat[,i]",sep="")
model <- glm(formula, family='binomial')
smr <- summary(model)$coefficients
smrC <- smr[nrow(smr),] # Info for mat[,i]
nat <- sum(mat[,i]*as.numeric(a[,3]<=t)) # Number of variants that have are lower than the pvalue treshold and have a particular annotation
dat <- rbind(dat,c(i,t,exp(smrC[1]), smrC[4],smrC[1],smrC[2],smrC[1]-1.96*smrC[2],smrC[1]+1.96*smrC[2], nat, na, nt[j], n))
}
dat
smr
smrC
dat
exp(0.9577959)
?exp
0.9577959-1.96*0.2790881
na
nt[j]
nt
PTS
dat
View(bins)
View(a)
nrow(a)
x <- read.delim("Downloads/S2_H3K27ac_DHS_metaProfile.dat.txt", header = F)
x$V2 <- 1:104
plot(x$V1, x$V2)
q()
library(ASAFE)
library(LDlinkR)
vars <- read.delim("LIIGH/Variants/Data/Variants/CapStarrseq_HELA_Active_1kb_Gwas_Clinvar_Gtex_dbSNP_Joined.txt")
View(vars)
vars <- read.delim("LIIGH/Variants/Data/Variants/CapStarrseq_HELA_Active_1kb_Gwas_Clinvar_Gtex_dbSNP_Joined.txt", header = F)
LDproxy_batch(snp = vars$V3[1:20], pop = "ALL", r2d = "r2", token = "eb6316a2caed", append = T)
start.time <- Sys.time()
LDproxy_batch(snp = vars$V3[1:20], pop = "ALL", r2d = "r2", token = "eb6316a2caed", append = T)
end.time <- Sys.time()
end.time - start.time
BiocManager::install("ldblock")
library(ldblock)
q()
library(xaringan)
xaringan::inf_mr()
pagedown::chrome_print("Cv2.html")
xaringan::inf_mr()
setwd("Documents/Documents/Cv/")
pagedown::chrome_print("Cv2.html")
setwd("../../../Github/My_Website/")
servr::daemon_stop(2)
library(blogdown)
blogdown::build_site()
blogdown::serve_site()
q()
